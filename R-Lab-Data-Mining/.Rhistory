install.packages("tidyverse")
install.packages(c("MASS", "data.table"))
install.packages("stringr")
install.packages(c("selectr", "rvest"))
source('~/GitHub/DBSCAN_VP-TREE_Cpp/R-Lab-Data-Mining/Zad-2-Klasyfikacja.R')
install.packages("gmodels")
source('~/GitHub/DBSCAN_VP-TREE_Cpp/R-Lab-Data-Mining/Zad-2-Klasyfikacja.R')
install.packages("C50")
source('~/GitHub/DBSCAN_VP-TREE_Cpp/R-Lab-Data-Mining/Zad-2-Klasyfikacja.R')
table(credit_ds[,16])
prop.table(table(Credit_Train_CDP[,16]))
prop.table(table(Credit_Test_CDP[,16]))
library(readr)
library(MASS)
library(e1071)
library(rpart)
library(randomForest)
library(rpart.plot)
library(dplyr)
library(lubridate)
library(data.table)
library(stringr)
library(caret)
library(plotly)
library(readr)
library(MASS)
library(e1071)
library(rpart)
library(randomForest)
library(rpart.plot)
library(dplyr)
library(lubridate)
library(data.table)
library(stringr)
library(caret)
library(plotly)
# --- *** Import danych:
rm(list = ls())            # Czyszczenie Globalnego Srodowiska
HU_Data_ALL <- as.data.frame(read.table("HU_TS_15_min.csv",header=TRUE,sep=","))
HU_Data_ALL$utc_timestamp <- as.data.frame(ymd_hms(HU_Data_ALL$utc_timestamp, tz = "UTC"))
start1 <- lubridate::ymd_hms('2014-12-22 23:45:00', tz = "UTC")
rok_start1 <- lubridate::ymd_hms('2017-04-30 22:45:00', tz = "UTC")
end1 <- lubridate::ymd_hms('2018-04-30 23:00:00', tz = "UTC")
rok_start2 <- lubridate::ymd_hms('2018-04-30 22:45:00', tz = "UTC")
end2 <- lubridate::ymd_hms('2019-04-30 23:00:00', tz = "UTC")
HU_Data <- HU_Data_ALL %>% filter(utc_timestamp[[1]] > rok_start1-days(2) & utc_timestamp[[1]] < end2+minutes(15))
colnames(HU_Data[,1]) <- ""
HU_Data <- HU_Data[, c("utc_timestamp" , "HU_load_actual_entsoe_transparency")]
# NA_sum <- sum(is.na(HU_Data$HU_load_actual_entsoe_transparency))
# levele <- as.integer(max(HU_Data$HU_load_actual_entsoe_transparency) - min(HU_Data$HU_load_actual_entsoe_transparency))
# minMW <- min(HU_Data$HU_load_actual_entsoe_transparency)
# maxMW <- max(HU_Data$HU_load_actual_entsoe_transparency)
names(HU_Data)[2] <- "Load_Now"
# --- *** Wstepna obrobka danych:
# --- Utworzenie nowej tablicy pod drzewo --- #
Temp <- HU_Data %>% filter(utc_timestamp > (rok_start1) & utc_timestamp < end1)
Temp$Hour <- hour(Temp$utc_timestamp)
Temp$Hour <- as.factor(Temp$Hour)
Min15Before <- HU_Data %>% filter(utc_timestamp > (rok_start1-minutes(15)) & utc_timestamp < end1-minutes(15)) %>% select(Load_Now)
Temp$Load_Min15 <- cbind(as.matrix(Min15Before))
rm(Min15Before)
Min30Before <- HU_Data %>% filter(utc_timestamp > (rok_start1-minutes(30)) & utc_timestamp < end1-minutes(30)) %>% select(Load_Now)
Temp$Load_Min30 <- cbind(as.matrix(Min30Before))
rm(Min30Before)
Min45Before <- HU_Data %>% filter(utc_timestamp > (rok_start1-minutes(45)) & utc_timestamp < end1-minutes(45)) %>% select(Load_Now)
Temp$Load_Min45 <- cbind(as.matrix(Min45Before))
rm(Min45Before)
Day1Before <- HU_Data %>% filter(utc_timestamp > (rok_start1-days(1)) & utc_timestamp < end1-days(1)) %>% select(Load_Now)
Temp$Load_Day1B <- cbind(as.matrix(Day1Before))
rm(Day1Before)
Day1Before15Min <- HU_Data %>% filter(utc_timestamp > (rok_start1-days(1)-minutes(15)) & utc_timestamp < end1-days(1)-minutes(15)) %>% select(Load_Now)
Temp$Load_Day1B15min <- cbind(as.matrix(Day1Before15Min))
rm(Day1Before15Min)
Day1Beforep15Min <- HU_Data %>% filter(utc_timestamp > (rok_start1-days(1)+minutes(15)) & utc_timestamp < end1-days(1)+minutes(15)) %>% select(Load_Now)
Temp$Load_Day1Bp15min <- cbind(as.matrix(Day1Beforep15Min))
rm(Day1Beforep15Min)
# --- Przygotowanie danych testowych:
newdata <- HU_Data %>% filter(utc_timestamp > (rok_start2) & utc_timestamp < end2)
newdata$Hour <- hour(newdata$utc_timestamp)
newdata$Hour <- as.factor(newdata$Hour)
Min15Before <- HU_Data %>% filter(utc_timestamp > (rok_start2-minutes(15)) & utc_timestamp < end2-minutes(15)) %>% select(Load_Now)
newdata$Load_Min15 <- cbind(as.matrix(Min15Before))
rm(Min15Before)
Min30Before <- HU_Data %>% filter(utc_timestamp > (rok_start2-minutes(30)) & utc_timestamp < end2-minutes(30)) %>% select(Load_Now)
newdata$Load_Min30 <- cbind(as.matrix(Min30Before))
rm(Min30Before)
Min45Before <- HU_Data %>% filter(utc_timestamp > (rok_start2-minutes(45)) & utc_timestamp < end2-minutes(45)) %>% select(Load_Now)
newdata$Load_Min45 <- cbind(as.matrix(Min45Before))
rm(Min45Before)
Day1Before <- HU_Data %>% filter(utc_timestamp > (rok_start2-days(1)) & utc_timestamp < end2-days(1)) %>% select(Load_Now)
newdata$Load_Day1B <- cbind(as.matrix(Day1Before))
rm(Day1Before)
Day1BeforeM15Min <- HU_Data %>% filter(utc_timestamp > (rok_start2-days(1)-minutes(15)) & utc_timestamp < end2-days(1)-minutes(15)) %>% select(Load_Now)
newdata$Load_Day1B15min <- cbind(as.matrix(Day1BeforeM15Min))
rm(Day1BeforeM15Min)
Day1BeforeP15Min <- HU_Data %>% filter(utc_timestamp > (rok_start2-days(1)+minutes(15)) & utc_timestamp < end2-days(1)+minutes(15)) %>% select(Load_Now)
newdata$Load_Day1Bp15min <- cbind(as.matrix(Day1BeforeP15Min))
rm(Day1BeforeP15Min)
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Day1B, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10:100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_Anova <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_Anova <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Day1B, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10:100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_RF <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_RF <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Min30 + Load_Day1B, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10:100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_RF30 <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_RF30 <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Min30 + Load_Min45 + Load_Day1B, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10:100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_RF3045 <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_RF3045 <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Day1B + Load_Day1B15min + Load_Day1Bp15min, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10:100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_RF1Day <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_RF1Day <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Day1B, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10,20,30,40,50,60,70,80,90,100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_RF <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_RF <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Min30 + Load_Day1B, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10,20,30,40,50,60,70,80,90,100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_RF30 <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_RF30 <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Min30 + Load_Min45 + Load_Day1B, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10,20,30,40,50,60,70,80,90,100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_RF3045 <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_RF3045 <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
RF_Tune <- tune(randomForest, Load_Now ~ Load_Min15 + Load_Day1B + Load_Day1B15min + Load_Day1Bp15min, data = Temp, validation.x = newdata, validation.y = newdata$Load_Now,ranges = list(ntree=c(10,20,30,40,50,60,70,80,90,100)))
newdata$ClassPredictRF <- predict(RF_Tune$best.model, newdata)
newdata$ClassPreRF_Shift <- c(as.numeric(as.character(newdata$ClassPredictRF[2:length(newdata$ClassPredictRF)])), as.numeric(as.character(newdata$ClassPredictRF[length(newdata$ClassPredictRF)])))
MAE_RF1Day <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift)) / length(newdata$Load_Now)
MAPE_RF1Day <- sum(abs(newdata$Load_Now - newdata$ClassPreRF_Shift) / newdata$Load_Now) / length(newdata$Load_Now) * 100
View(RF_Tune)
gammas <- c(0.00005, 0.00001, 0.000005,0.000001,0.0000005,0.0000001,0.00000001,0.000000001,0.000000001,0.000000001,0.000000001,0.0000000001)
costs <- c(2000,2000,5000,10000,10000,100000,100000,1000000,100000,10000,1000,10000)
MAE_C <- c(MAE_SVM_v1,MAE_SVM_v2,MAE_SVM_v3,MAE_SVM_v4,MAE_SVM_v5,MAE_SVM_v6,MAE_SVM_v7,MAE_SVM_v8,MAE_SVM_v9,MAE_SVM_v10,MAE_SVM_v11,MAE_SVM_v12)
MAPE_C <- c(MAPE_SVM_v1,MAPE_SVM_v2,MAPE_SVM_v3,MAPE_SVM_v4,MAPE_SVM_v5,MAPE_SVM_v6,MAPE_SVM_v7,MAPE_SVM_v8,MAPE_SVM_v9,MAPE_SVM_v10,MAPE_SVM_v11,MAPE_SVM_v12)
p <- plot_ly(x=gammas, y=costs, z=MAPE_C)     # Interaktywny wykres 3D, zaleznosci wspolczynnika MAPE od gammy i kosztu
p                                             # Plot (automatyczny)
library(readr)
library(MASS)
library(e1071)
library(rpart)
library(randomForest)
library(rpart.plot)
library(dplyr)
library(lubridate)
library(data.table)
library(stringr)
library(caret)
library(plotly)
gammas <- c(0.00005, 0.00001, 0.000005,0.000001,0.0000005,0.0000001,0.00000001,0.000000001,0.000000001,0.000000001,0.000000001,0.0000000001)
costs <- c(2000,2000,5000,10000,10000,100000,100000,1000000,100000,10000,1000,10000)
MAE_C <- c(MAE_SVM_v1,MAE_SVM_v2,MAE_SVM_v3,MAE_SVM_v4,MAE_SVM_v5,MAE_SVM_v6,MAE_SVM_v7,MAE_SVM_v8,MAE_SVM_v9,MAE_SVM_v10,MAE_SVM_v11,MAE_SVM_v12)
MAPE_C <- c(MAPE_SVM_v1,MAPE_SVM_v2,MAPE_SVM_v3,MAPE_SVM_v4,MAPE_SVM_v5,MAPE_SVM_v6,MAPE_SVM_v7,MAPE_SVM_v8,MAPE_SVM_v9,MAPE_SVM_v10,MAPE_SVM_v11,MAPE_SVM_v12)
p <- plot_ly(x=gammas, y=costs, z=MAPE_C)     # Interaktywny wykres 3D, zaleznosci wspolczynnika MAPE od gammy i kosztu
p                                             # Plot (automatyczny)
gammas <- c(0.00005, 0.00001, 0.000005,0.000001,0.0000005,0.0000001,0.00000001,0.000000001,0.000000001,0.000000001,0.000000001,0.0000000001)
costs <- c(2000,2000,5000,10000,10000,100000,100000,1000000,100000,10000,1000,10000)
MAE_C <- c(22.416, 17.422, 15.547, 14.258,14.047,13.707,12.071,11.579,10.132,8.103,8.184,7.980)
MAPE_C <- c(0.474,0.371,0.333,0.308,0.303,0.297,0.261,0.246,0.216,0.171,0.169,0.165)
p <- plot_ly(x=gammas, y=costs, z=MAPE_C)     # Interaktywny wykres 3D, zaleznosci wspolczynnika MAPE od gammy i kosztu
p
