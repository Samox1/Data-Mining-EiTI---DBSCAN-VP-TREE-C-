X <- cbind(X, R)
X <- as.data.frame(X)
View(X)
testoplot <- ggplot(X, aes(x=X, y=Y)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
testoplot <- testoplot + coord_fixed(ratio = 1)
testoplot <- testoplot + geom_point(size=R, pch=1)
show(testoplot)
testoplot <- ggplot(X, aes(x=X$X, y=X$Y)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
testoplot <- testoplot + coord_fixed(ratio = 1)
testoplot <- testoplot + geom_point(size=R, pch=1)
show(testoplot)
View(X)
testoplot <- ggplot(X, aes(x=X, y=Y)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
testoplot <- testoplot + coord_fixed(ratio = 1)
testoplot <- testoplot + geom_point(size=R, pch=1)
show(testoplot)
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) {
x <- xc + r*cos(seq(0, pi, length.out=100))
ymax <- yc + r*sin(seq(0, pi, length.out=100))
ymin <- yc + r*sin(seq(0, -pi, length.out=100))
annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...)
}
square <- ggplot(data.frame(x=0:1, y=0:1), aes(x=x, y=y))
square + gg_circle(r=0.25, xc=0.5, yc=0.5)
square + gg_circle(r=0.25, xc=0.5, yc=0.5, color="blue", fill="red", alpha=0.2)
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) {
x <- xc + r*cos(seq(0, pi, length.out=100))
ymax <- yc + r*sin(seq(0, pi, length.out=100))
ymin <- yc + r*sin(seq(0, -pi, length.out=100))
annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...)
}
square <- ggplot(data.frame(x=0:1, y=0:1), aes(x=x, y=y))
square + coord_fixed(ratio = 1)
square + gg_circle(r=0.25, xc=0.5, yc=0.5)
square + gg_circle(r=0.25, xc=0.5, yc=0.5, color="blue", fill="red", alpha=0.2)
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) {
x <- xc + r*cos(seq(0, pi, length.out=100))
ymax <- yc + r*sin(seq(0, pi, length.out=100))
ymin <- yc + r*sin(seq(0, -pi, length.out=100))
annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...)
}
square <- ggplot(data.frame(x=0:1, y=0:1), aes(x=x, y=y))
square + coord_fixed(ratio = 1)
# square + gg_circle(r=0.25, xc=0.5, yc=0.5)
square + gg_circle(r=0.25, xc=0.5, yc=0.5, color="blue", fill="red", alpha=0.2)
square <- ggplot(data.frame(x=0:1, y=0:1), aes(x=x, y=y))
square + coord_fixed(ratio = 1)
# square + gg_circle(r=0.25, xc=0.5, yc=0.5)
square + gg_circle(r=0.5, xc=0.5, yc=0.5, color="blue", fill="red", alpha=0.2)
testoplot <- ggplot(X, aes(x=X, y=Y)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
testoplot <- testoplot + coord_fixed(ratio = 1)
testoplot <- testoplot + gg_circle(r=X$R, xc=X$X, yc=X$Y)
show(testoplot)
square <- ggplot(data.frame(x=0.1:2, y=0.1:2), aes(x=x, y=y))
square + coord_fixed(ratio = 1)
# square + gg_circle(r=0.25, xc=0.5, yc=0.5)
square + gg_circle(r=0.5, xc=0.5, yc=0.5, color="blue", fill="red", alpha=0.2)
square <- ggplot(X, aes(x=X, y=Y))
square + coord_fixed(ratio = 1)
# square + gg_circle(r=0.25, xc=0.5, yc=0.5)
square + gg_circle(r=0.5, xc=0.5, yc=0.5, color="blue", fill="red", alpha=0.2)
square <- ggplot(X, aes(x=X, y=Y))
square + coord_fixed(ratio = 1)
# square + gg_circle(r=0.25, xc=0.5, yc=0.5)
square + gg_circle(r=0.5, xc=X$X, yc=X$Y, color="blue", fill="red", alpha=0.2)
View(Tree1)
View(Tree2)
square <- ggplot(X, aes(x=c(min(X):max(X)), y=min(Y):max(Y)))
square + coord_fixed(ratio = 1)
# square + gg_circle(r=0.25, xc=0.5, yc=0.5)
square + gg_circle(r=0.5, xc=X$X, yc=X$Y, color="blue", fill="red", alpha=0.2)
square <- ggplot(X, aes(x=c(min(X):max(X)), y=min(Y):max(Y)))
# square + gg_circle(r=0.25, xc=0.5, yc=0.5)
for(x in 1:length(X$X)){
square <- square + gg_circle(r=X$R[x], xc=X$X[x], yc=X$Y[x], color="blue", fill="red", alpha=0.2)
}
show(square)
View(X)
### --- Funkcja z biblioteki DBSCAN --- ###
Data <- as.data.frame(read.table("Data_Clustered_4000_0-1-v2.csv", header=FALSE,sep=","))
View(Data)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,1]):max(Data[,1])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=0.3, xc=Data[x,1], yc=Data[x,1], color="blue", alpha=0.2)
}
show(square)
runif
?runif
X <- seq(0.1,2, by=0.1)
Y <- seq(0.1,1, by=0.05)
R <- seq(0.1,2, by=0.1)
Y <- seq(0.1,1.05, by=0.05)
X <- seq(0.1,2, by=0.1)
Y <- seq(0.1,1.05, by=0.05)
R <- seq(0.1,2, by=0.1)
X <- cbind(X, Y)
X <- cbind(X, R)
X <- as.data.frame(X)
testoplot <- ggplot(X, aes(x=X, y=Y)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
testoplot <- testoplot + coord_fixed(ratio = 1)
testoplot <- testoplot + gg_circle(r=X$R, xc=X$X, yc=X$Y)
show(testoplot)
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) {
x <- xc + r*cos(seq(0, pi, length.out=100))
ymax <- yc + r*sin(seq(0, pi, length.out=100))
ymin <- yc + r*sin(seq(0, -pi, length.out=100))
annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...)
}
square <- ggplot(X, aes(x=c(min(X):max(X)), y=min(Y):max(Y)))
for(x in 1:length(X$X)){
square <- square + gg_circle(r=X$R[x], xc=X$X[x], yc=X$Y[x], color="blue", fill="red", alpha=0.2)
}
show(square)
### --- Funkcja z biblioteki DBSCAN --- ###
Data <- as.data.frame(read.table("Data_Clustered_4000_0-1-v2.csv", header=FALSE,sep=","))
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=0.3, xc=Data[x,1], yc=Data[x,2], color="blue", alpha=0.2)
}
show(square)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=0.3, xc=Data[x,1], yc=Data[x,2], color=colur[x,3], alpha=0.2)
}
show(square)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=0.3, xc=Data[x,1], yc=Data[x,2], color=colur[x], alpha=0.2)
}
show(square)
library(tidyverse)
library(MASS)
library(ggplot2)
library(ggforce)
library(dbscan)
### --- RYSOWANIE ODPOWIEDNIEJ WIELKOSCI OKREGOW --- ###
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) {
x <- xc + r*cos(seq(0, pi, length.out=100))
ymax <- yc + r*sin(seq(0, pi, length.out=100))
ymin <- yc + r*sin(seq(0, -pi, length.out=100))
annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...)
}
### --- Funkcja z biblioteki DBSCAN --- ###
Data <- as.data.frame(read.table("Data_Clustered_4000_0-1-v2.csv", header=FALSE,sep=","))
dbsca <- dbscan(Data[,1:2], 0.3, 6, borderPoints = TRUE)
colur <- as.factor(dbsca[["cluster"]])
jpeg("R-DBSCAN.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data[,1:2], aes(x=Data[,1], y=Data[,2], colour = colur)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=0.3, xc=Data[x,1], yc=Data[x,2], color=colur[x], alpha=0.2)
}
show(square)
### --- Dane z C++ --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_4000.csv", header=FALSE,sep=","))
Data_Cluster <- Data
cluster <- as.factor(Data_Cluster[,3])
jpeg("Cpp-DBSCAN.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=0.3, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
### --- Dane z C++ --> VP-TREE v1 --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_20000.csv", header=FALSE,sep=","))
cluster <- as.factor(Data_Cluster[,4])
jpeg("Cpp-DBSCAN-VP-v1.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=0.3, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
### --- Dane z C++ --> VP-TREE v2 --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_20000.csv", header=FALSE,sep=","))
cluster <- as.factor(Data_Cluster[,5])
jpeg("Cpp-DBSCAN-VP-v2.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=0.3, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
table(colur)
table(Data_Cluster[,3])
table(Data_Cluster[,4])
table(Data_Cluster[,5])
### --- RYSOWANIE ODPOWIEDNIEJ WIELKOSCI OKREGOW --- ###
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) {
x <- xc + r*cos(seq(0, pi, length.out=100))
ymax <- yc + r*sin(seq(0, pi, length.out=100))
ymin <- yc + r*sin(seq(0, -pi, length.out=100))
annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...)
}
### --- Funkcja z biblioteki DBSCAN --- ###
rr = 0.3
Data <- as.data.frame(read.table("Data_Clustered_4000_0-1-v2.csv", header=FALSE,sep=","))
dbsca <- dbscan(Data[,1:2], 0.3, 6, borderPoints = TRUE)
colur <- as.factor(dbsca[["cluster"]])
jpeg("R-DBSCAN.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data[,1:2], aes(x=Data[,1], y=Data[,2], colour = colur)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("R-DBSCAN-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=colur[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_4000.csv", header=FALSE,sep=","))
Data_Cluster <- Data
cluster <- as.factor(Data_Cluster[,3])
jpeg("Cpp-DBSCAN.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --> VP-TREE v1 --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_20000.csv", header=FALSE,sep=","))
cluster <- as.factor(Data_Cluster[,4])
jpeg("Cpp-DBSCAN-VP-v1.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-VP-v1-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --> VP-TREE v2 --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_20000.csv", header=FALSE,sep=","))
cluster <- as.factor(Data_Cluster[,5])
jpeg("Cpp-DBSCAN-VP-v2.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-VP-v2-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
table(colur)
table(Data_Cluster[,3])
table(Data_Cluster[,4])
table(Data_Cluster[,5])
# Data <- as.data.frame(read.table("Data_Clustered_4000_0-1-v2.csv", header=FALSE,sep=","))
Data <- as.data.frame(read.table("Data_Clustere_4000_0-5_10_01.csv", header=FALSE,sep=","))
# Data <- as.data.frame(read.table("Data_Clustered_4000_0-1-v2.csv", header=FALSE,sep=","))
Data <- as.data.frame(read.table("Data_Clustere_4000_0-5_10_0-1.csv", header=FALSE,sep=","))
library(tidyverse)
library(MASS)
library(ggplot2)
library(ggforce)
library(dbscan)
### --- RYSOWANIE ODPOWIEDNIEJ WIELKOSCI OKREGOW --- ###
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) {
x <- xc + r*cos(seq(0, pi, length.out=100))
ymax <- yc + r*sin(seq(0, pi, length.out=100))
ymin <- yc + r*sin(seq(0, -pi, length.out=100))
annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...)
}
### --- Funkcja z biblioteki DBSCAN --- ###
rr = 0.3
NN = 10
# Data <- as.data.frame(read.table("Data_Clustered_4000_0-1-v2.csv", header=FALSE,sep=","))
Data <- as.data.frame(read.table("Data_Clustere_4000_0-5_10_0-1.csv", header=FALSE,sep=","))
dbsca <- dbscan(Data[,1:2], rr, NN, borderPoints = TRUE)
colur <- as.factor(dbsca[["cluster"]])
jpeg("R-DBSCAN.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data[,1:2], aes(x=Data[,1], y=Data[,2], colour = colur)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("R-DBSCAN-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=colur[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_4000.csv", header=FALSE,sep=","))
Data_Cluster <- Data
cluster <- as.factor(Data_Cluster[,3])
jpeg("Cpp-DBSCAN.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --> VP-TREE v1 --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_20000.csv", header=FALSE,sep=","))
cluster <- as.factor(Data_Cluster[,4])
jpeg("Cpp-DBSCAN-VP-v1.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-VP-v1-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --> VP-TREE v2 --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_20000.csv", header=FALSE,sep=","))
cluster <- as.factor(Data_Cluster[,5])
jpeg("Cpp-DBSCAN-VP-v2.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-VP-v2-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
table(colur)
table(Data_Cluster[,3])
table(Data_Cluster[,4])
table(Data_Cluster[,5])
### --- RYSOWANIE ODPOWIEDNIEJ WIELKOSCI OKREGOW --- ###
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) {
x <- xc + r*cos(seq(0, pi, length.out=100))
ymax <- yc + r*sin(seq(0, pi, length.out=100))
ymin <- yc + r*sin(seq(0, -pi, length.out=100))
annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...)
}
### --- Funkcja z biblioteki DBSCAN --- ###
rr = 0.5
NN = 10
# Data <- as.data.frame(read.table("Data_Clustered_4000_0-1-v2.csv", header=FALSE,sep=","))
Data <- as.data.frame(read.table("Data_Clustere_4000_0-5_10_0-1.csv", header=FALSE,sep=","))
dbsca <- dbscan(Data[,1:2], rr, NN, borderPoints = TRUE)
colur <- as.factor(dbsca[["cluster"]])
jpeg("R-DBSCAN.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data[,1:2], aes(x=Data[,1], y=Data[,2], colour = colur)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("R-DBSCAN-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=colur[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_4000.csv", header=FALSE,sep=","))
Data_Cluster <- Data
cluster <- as.factor(Data_Cluster[,3])
jpeg("Cpp-DBSCAN.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --> VP-TREE v1 --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_20000.csv", header=FALSE,sep=","))
cluster <- as.factor(Data_Cluster[,4])
jpeg("Cpp-DBSCAN-VP-v1.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-VP-v1-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
### --- Dane z C++ --> VP-TREE v2 --- ###
# Data_Cluster <- as.data.frame(read.table("Data_Clustered_20000.csv", header=FALSE,sep=","))
cluster <- as.factor(Data_Cluster[,5])
jpeg("Cpp-DBSCAN-VP-v2.jpg", width = 2000, height = 2000, quality = 100)
sp <- ggplot(Data_Cluster[,1:2], aes(x=V1, y=V2, colour = cluster)) + geom_point() + scale_x_continuous() + scale_y_continuous() #+ theme(aspect.ratio = 1)
sp <- sp + coord_fixed(ratio = 1)
sp <- sp + geom_point(size=10, pch=1) #+ coord_cartesian(xlim = c(0,4), ylim = c(0,4))
#sp <- sp + geom_point(aes(x=Data_Cluster[63,1], y=Data_Cluster[63,2], colour = 'black'))
show(sp)
dev.off()
jpeg("Cpp-DBSCAN-VP-v2-GG.jpg", width = 2000, height = 2000, quality = 100)
square <- ggplot(Data[,1:2], aes(x=c(min(Data[,1]):max(Data[,1])), y=min(Data[,2]):max(Data[,2])))
for(x in 1:length(Data[,1])){
square <- square + gg_circle(r=rr, xc=Data[x,1], yc=Data[x,2], color=cluster[x], alpha=0.2)
}
show(square)
dev.off()
table(colur)
table(Data_Cluster[,3])
table(Data_Cluster[,4])
table(Data_Cluster[,5])
##############################################################################################
### Badanie Drzewa z C++
library(igraph)
Tree1 <- as.data.frame(read.table("Tree1.csv", header=TRUE ,sep=","))
?graph.data.frame
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
"Esmeralda"),
age=c(48,33,45,34,21),
gender=c("F","M","F","M","F"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David", "Esmeralda"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
same.dept=c(FALSE,FALSE,TRUE,FALSE,FALSE,TRUE),
friendship=c(4,5,5,2,1,1), advice=c(4,5,5,4,2,3))
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
plot(g)
View(Tree1)
dat <- data.frame(parent=Tree1$ID_Parent,
node=Tree1$ID,
text=as.character(Tree1$VP.Index))
g <- graph.data.frame(dat)
lay = layout.reingold.tilford(g)
par(mar=rep(0,4), mfrow=c(1,2))
plot(g, layout=lay)
dat <- data.frame(parent=Tree1$ID_Parent,
node=Tree1$ID,
# text=as.character(Tree1$VP.Index))
text=as.character(Tree1$L_kid_N+Tree1$R_kid_N))
g <- graph.data.frame(dat)
lay = layout.reingold.tilford(g)
par(mar=rep(0,4), mfrow=c(1,2))
plot(g, layout=lay)
View(dat)
?graph.data.frame
Tree1 <- as.data.frame(read.table("Tree1.csv", header=TRUE ,sep=","))
Tree2 <- as.data.frame(read.table("Tree2.csv", header=TRUE ,sep=","))
dat <- data.frame(parent=Tree1$ID_Parent,
node=Tree1$ID,
# text=as.character(Tree1$VP.Index))
text=as.character(Tree1$L_kid_N+Tree1$R_kid_N))
g <- graph.data.frame(dat)
lay = layout.reingold.tilford(g)
# par(mar=rep(0,4), mfrow=c(1,2))
plot(g, layout=lay)
